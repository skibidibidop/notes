RECURSIVE PROGRAMMING

///// SOURCE/S /////
	Introduction to Recursive Programming by Manuel Rubio-Sanchez
	The Recursive Book of Recursion by Al Sweigart

///// CONTENTS /////
# BASIC CONCEPTS OF RECURSIVE PROGRAMMING
#
# PRACTICE QUESTIONS

/////////////////////////////////////////////////////////////////////////////////////////////////
# BASIC CONCEPTS OF RECURSIVE PROGRAMMING
	Recursions
		Depend on function calls and the call stack
		Something which includes itself in its definition
		A function that calls itself

	Frame objects
		Contain information about a single function call
		Gets pushed onto or popped off stacks

	Maximum recursion depth
		Depends on programming language
		The limit of number of recursive function calls

	Base case
		A condition which causes the recursive function to stop calling recursively

	Recursive functions require a recursive case and a base case

	Get subproblem with smaller size than the original problem
	Decompose the original problem into a smaller one

# PRACTICE QUESTIONS
	From "The Recursive Book of Recursive Programming" by Al Sweigart

	Chapter 1
		1. In general, what is a recursive thing?
			A recursive thing is something that includes itself in its
				definition.

		2. In programming, what is a recursive function?
			A recursive function is a function that calls itself. Ideally,
				recursive functions should have base cases and recursive cases.

		3. What four features do functions have?
			A function has code that is run when it is invoked
			A function can accept arguments
			A function returns a value
			The line where the function was invoked is remembered by the program
				so that execution can continue

		4. What is a stack?
			It is a data structure where processing is LIFO.

		5. What are the terms for adding and removing values to and from the top of
			a stack?
			Data is "pushed onto" a stack when it is added
			Data is "popped off" a stack after it is processed

		6. Say you push the letter J to a stack, then push the letter Q, then pop the
			stack, then push the letter K, then pop the stack again. What does the
			stack look like?
			The stack will only have J.

		7. What is pushed and popped onto the call stack?
			Frame objects are pushed to and popped off the call stack.

		8. What causes a stack overflow to happen?
			Stack overflows happen when there are too many function calls in the 
			call stack and not enough memory.

		9. What is a base case?
			A base case is a statement, usually conditional, that causes the
				recursive calls to stop. Calls in the stack are then popped
				off one after the other.

		10. What is a recursive case?
			A recursive case is something that causes a recursion, usually when
				a function calls itself.

		11. How many base cases and recursive cases do recursive functions have?
			Recursive functions need at least 1 base case and 1 recursive case to
				function properly.

		12. What happens if a recursive function has zero base cases?
			An infinite loop / stack overflow.

		13. What happens if a recursive function has zero recursive cases?
			It becomes an ordinary function, not a recursive one.

	Chapter 2
		1. What is 4! ?
			24

		2. How can you use the factorial of (n - 1) to calculate the factorial of n?
			def factorial(n):
				if number == 1:
					return 1

				return n * factorial(n - 1)

		3. What is the critical weakness of the recursive factorial function?
			Can very easily cause stack overflow.

		4. What are the first five numbers of the Fibonacci sequence?
			1, 1, 2, 3, 5

		5. What 2 numbers do you add to get the nth Fibonacci number?
			(n - 1) and (n - 2)

		6. What is the critical weakness of the recursive Fibonacci sequence?
			Redundant work / computations.

		7. What does an iterative algorithm always use?
			Loops.

		8. Is it always possible to convert an iterative algorithm into a recursive one?
			Yes

		9. Is it always possible to convert a recursive algorithm into an iterative one?
			Yes

		10. Any recursive algorithm can be performed iteratively by using what two things?
			An emulated stack and a loop

		11. What three features do programming problems that are suitable to recursive
			solutions have?
			Tree-like structure, requires backtracking, and will not cause stack
				overflow

		12. When is recursion required to solve a programming problem?
			Never, but thinking recursively while implementing iteratively
				may lead to better solutions.

