C LANGUAGE NOTES

READING LIST

CONTENTS //////////////////////////////////////////////////////////////////////////////////////////
* COMPILING
* DATA TYPES
* FORMAT SPECIFIERS
* ARRAYS
* SCOPE
* CONSTANTS
* TYPE CONVERSIONS
* BITWISE OPERATORS
* PRECEDENCE
* CONTROL FLOW
* FUNCTIONS AND PROGRAM STRUCTURE
* PREPROCESSORS
* COMMAND-LINE ARGUMENTS
* RECURSION
* POINTERS AND MEMORY
* STACK, HEAP
* INPUT AND OUTPUT
* FILES
* DATA STRUCTURES
* OTHER NOTES

THE C LANGUAGE ////////////////////////////////////////////////////////////////////////////////////

# COMPILING
	gcc -o [executable_name] [source_file].c
	// without the square brackets
	// -o means outfile

# DATA TYPES
	bool				: boolean expression
	char				: a single character
	double				: floating-point value with more digits than float
	float				: floating-point value
	int				: integers up to a certain number of bits
	short				: short integer
	long				: integers with more bits than int

	uint8_t				: u stands for unsigned
					: int for integer
					: 8 bits or 1 byte
					: _t denotes that this is its own type
					: an unsigned 8 bit integer that is its own type
	
	unsigned & signed		: applicable to int or char
					: always positive or zero
					: an unsigned 8-bit char has values between 0 to 255
					: a signed 8-bit char has values between -128 and 127

	Define new data type:
		
		typedef struct
		{
			string name;
			string number;
		}
		person; // name of new struct

	Newly defined data type can be used to define new arrays/variables
		
		person people[2];

		people[0].name = "Sample1";
		people[0].number = "+1-234-567";

	Dot notation, as seen above, can be used to access the newly defined data type

	If necessary to call newly defined structure inside that structure:

		typedef struct person
		{
			string name;
			string number;
			struct person * next;
		}
		person;

# FORMAT SPECIFIERS
	%3d
		print integer at least 3 characters wide
	%2.1f
		print as floating point at least 2 characters wide, with 1 character after
			the decimal point
	%.2f
		print as floating point, 2 characters after decimal point
		
	scanf("%100s", &variable);
		take string (character array) with maximum of 100 characters

# ARRAYS
	Elements of arrays can be treated as variables
	Arrays cannot be treated as variables

	Assignment of one array to another using the = operator is not possible in C
	It has to be done iteratively

	Declaring arrays
		type var[n] = { val1, val2, val3 };
		// n is not required, compiler can figure it out if elements are provided in
			curly brackets
		// n should be the number of elements in the array

	This is also possible:
	type var[n][n];

	Using arrays in functions:
		type func_name(type array[])
			// For prototype and declaration
		
		func_name(var)
			// during invocation, no [] on var

		when passing to a function, pass the location of the first element of the array
			// no need for square bracket notation since arr[0] is equivalent to
				arr
			// prefer function(char *s) over function(char s[]) since char *s is
				more explicit about the parameter being a pointer
	
	Multidimensional arrays
		char sample[2][13] = {
			{0, 31, 28, 30,... other elements},
			{0, 31, 29, 30,... other elements}
		}
			// [row][col]

		Passing to functions:
			f(char sample[2][13]) or f(char sample[][13]) since the number of rows is
				irrelevant

			can also be f(char (*sample)[13]) // pointer to an array of 13 chars
				// parentheses for (*sample) are necessary
		
		An array of strings is a multidimensional array
			char *name[] = {"Name1", "Name2", "Name3"};

# SCOPE
	External variables (extern keyword)
		"Define" means to create a variable and/or allocate storage for it
		"Declare" means to state the nature of the variable. No storage allocated

		To use a global variable in a function, use extern:
		
		// The global variable is declared outside of all functions
		// The function that needs to use that variable needs to have a declaration
		// like this:
			function() {
				extern int global_variable;
			}

		The example above is redundant if all external variables are defined in the
			beginning of the code

		If a program is divided into separate files, global variables have to be
			declared with extern

		Extern declarations are usually collected in a separate file (header) and
			then included with #include <filename.h>

# CONSTANTS
	Suffixes
		long constant			: terminal l (ell) or L
						: 12345l or 12345L
		unsigned constants		: terminal u or U
		unsigned long			: ul or UL
		floating-point constants	: has decimal point or exponent
						: data type is double unless suffixed
		float constant			: 123.4f or 123.4F
		long double constant		: 123.4l or 123.4L

	Hex, Oct notation
		Octal				: leading 0
		Hexadecimal			: leading 0x
		
		Oct and Hex constants can also have suffixes
			L for long
			U for unsigned

			Example: 0xFUL is an unsigned long constant
	
	Character constant
		An integer written as one character within single quotes
			'a' or 'b', etc.
		
		Escape sequences
			\a			: alert bell
			\b			: backspace
			\f			: formfeed
			\n			: newline
			\r			: carriage return
			\t			: horizontal tab
			\v			: vertical tab
			\\			: backslash
			\?			: question mark
			\'			: single quote
			\"			: double quotes
			\ooo			: octal number
			\xhh			: hex number
			\0			: null character

	String constant / string literal
		Zero or more characters enclosed in double quotes
		An array of characters terminated by '\0'

	'x' is different from "x"
		'x' is an integer which represents the numeric value of that character
			in ASCII (or some other character set)
		"x" is a string of the characters x and \0

	Enumeration constants
		Enumeration: a list of constant integer values
		enums can be used as an alternative to #define
		Names need to be distinct, duplicate values are OK
		If not all values are specified, the progression is continued from the
			last value
			enum var1 = { VAL1 = 1, VAL2, VAL3, VAL4 };
				// VAL2 is 2, VAL3 is 3, VAL4 is 4

		Can also be used like so:
			enum boolean = { NO, YES };
				// NO is 0, YES is 1
				// The first name in an enum has value 0 unless specified
				// Other values will continue from that unless specified

# TYPE CONVERSIONS
	Refers to operands of different types

	Specify signed or unsigned if non-character data is to be stored char variables

	For signed operands (in descending order):
		If there is a long double, convert the other to long double
		If there is a double, convert the other to double
			Floats are not automatically converted to double
		If there is a float, convert the other to float
		Convert char and short to int
		If there is a long, convert the other to long
		
	For conversions involving unsigned operands, refer to The C Programming Lanugage
		(2nd Edition) by K & R PDF page 58

	Explicit type conversions
		AKA coercion
		By using the cast operator: (type name) expression

		If n is an int:
			sqrt((double) n)
			// sqrt requires arguments with type double
			// the value passed to sqrt is now type double, but n is still not
			// altered

		Happens automatically in function prototypes where the argument types are
			declared. No need to cast in this case

# BITWISE OPERATORS
	May only be applied to integral operands (char, short, int, long)

	&				: bitwise AND
	|				: bitwise OR
	^				: bitwise exclusive OR
	<<				: left shift
	>>				: right shift
	~				: one's complement (unary)

	Operates on the bit-level

	n = 1 & 2;
		// n = 0;
		// works by applying the & operator to the binary values of 1 (01) and 2(10)
		//  01
		// &10
		// ---
		//  00

	Bitwise operators also affect leading zeros (padding).

		For the ~ operator will also invert leading zeros (padding). It might be
		expected that ~5 (101) will result to 2 (010), but the output is actually a
		very big number since 101 is actually padded with a lot of leading zeros.
		
		The number of leading zeros (and the number of binary digits) depends on
		the data type size
	
	The 0b prefix can be used on binary digits instead of using decimal numbers with
		bitwise operators

		Decimal 5 can be written as 0b101

		This can also be used when defining macros
			#define VALUE 0b101

# PRECEDENCE
	Table of Precedence of Operators: The C Programming Language (2nd Edition) by K
		& R, PDF page 67

# CONTROL FLOW
	Statements and blocks
		Expressions with statement terminators (;)
		Blocks (compound statements) using { and }

	If-else statements and Else-if statements

	Switch statements
		Multi-way decision

		switch (expression) {
			case const-expr:
				statements
				break
			case const-expr:
				statements
			default:
				statements
				break
		}

		All case expressions must be different
		Execution starts where a case is matched. All cases after will also
			execute unless there is a break
		The default case (optional) is executed if no case is matched
		No execution if no default and no case match
		Break causes immediate exit from the switch statement
		It's good practice to include a break in default in case a new case
			is added in the future
	
	Break and Continue
		Break can provide early exit from switch statements and for loops
			for, while, and do
		Continue skips to the next iteration of the loop

	Goto and labels
		Useful for:
			Breaking out of deeply nested loops where
				breaks are not enough
			Cases where errors can occur in multiple locations

		Labels can be attached to any statement in the same function as the
			goto

		if (condition) {
			goto label1;
		}

		label1:
			statements;

		Code made with gotos and labels can always be rewritten without using
			those
		Generally, code with gotos and labels are harder to understand and
			maintain

		Use rarely

# FUNCTIONS AND PROGRAM STRUCTURE
	Header files
		Parts of big programs can be separated into multiple files. Example:
			The main function can be stored in main.c
			custom_function1 and custom_function2 can be stored in
				custom_functions.c
			getch and ungetch functions can be stored in getch.c. These
				are separated from custom_function1 and
				custom_function2 since these will come from a separately
				compiled library
			Shared definitions and declarations can be stored in 1 header file:
				sampleheader.h. Each file can then #include "sampleheader.h"
				if necessary
			Bigger programs will require more header files for organization
	
	Static variables
		External static variables will only be accessible to functions in the source
			file where they are declared

			static type variable_name

		External static can be used on variables and functions
	
	Register variables
		Used for variables which will be heavily used

			register type variable_name

		Applicable only to automatic variables and formal parameters

		Compilers can ignore register declarations if necessary (the variables will
			still be stored but not in the machine register)

		The address of a register variable can't be taken, even if the variable isn't
			actually stored in a register

# PREPROCESSORS
	#include				: file inclusion
						: #include "filename.h" or #include <filename.h>
	#define
		scope is from point of definition to end of source file

		#define name replacement text, continuation\
		continuation, continuation, continuation\
		continuation, end of replacement text

		#define forever for (;;)
			// using the word forever will create an infinite loop

		#define max(A, B) ((A) > (B) ? (A) : (B))

		#define dprint(expr) printf(#expr " = %g\n", expr)
			when invoked using dprint(x/y):

			printf("x/y = %g\n", x/y);
				// the first x/y is enclosed in double quotation marks because
					of the #expr in the replacement text
				// "x/y" and " = %g\n" are then concatenated

		##
			Used to concatenate arguments and strip white space between during
				macro expansion
			
			#define combine(one, two) one ## two
				// combine(name, 1) will output name1
	#undefine
		Names can be undefined to ensure that routines are functions and not macros
	
	Conditionals can be used to control preprocessing. This is a way to include code
		selectively

	#if
		works with #elif, #else, #endif
		More info in The C Programming Language (2nd Edition) by K & R, PDF page 105

# COMMAND-LINE ARGUMENTS
	int main(int argc, char *argv[])
		argc is the argument count
		argv is the argument vector
		the program name counts as the first argument
		the argument vector will contain [program name, argument, argument, ..., null-pointer]
		
	char *argv[] is a multi-dimensional array; it is an array of character array

# RECURSION
	Function calling itself
	Can be terminated by providing base case
	Base case: a solution that stops the recursive process

	void draw(int n)
	{
		// If nothing to draw
		if (n <= 0)					// this is the base case
		{
			return;
		}

		// Draw pyramid of height n - 1
		draw(n - 1);					// this is the recursive case

		// Draw one more row of width n
		for (int i = 0; i < n; i++)
		{
			printf("#");
		}
		printf("\n");
	}
	
# POINTERS AND MEMORY
	pointer				- variable that contains the address of some value
		Example:

		int n = 50;
		int * p = &n;

		n contains 50, p is a pointer that contains the address of n
		int * is the data type (an integer pointer)
		p is pointing to an integer

	To emphasize that the * above is being used to indicate data type and not as
		the dereference operator, I use int * variable instead of int *variable

	%p				: print out address to which a pointer refers
	&				: provide address
	*				: dereference operator
					: pointer, go to this location in memory
					: pointers can also be used without dereferencing

	null pointer
		always initialize to NULL if value can't be set immediately
		Example:
			int * p = NULL;

		NULL is a mnemonic for zero to indicate this special value for a pointer
		NULL is defined in stdio.h

	Comparing two identical-looking strings using the == operator will result in false
		because what's being compared are actually the addresses
	
	array subscripting and pointers
		Pointers are faster than square bracket notation

		int array[10];
		int * pa;

		pa = &array[0];
			// pa is now pointing to the content of array[0]
		x = *pa;
			// x has a copy of the contents of array[0]
		y = *pa + 1;
			// y has a copy of the contents of array[1]

		pa = &array[0] can also be expressed as pa = array since by definition,
			the value of an array is the address of element 0

		array[i] is equivalent to *(array + i)
			//&array[i] and (array + i) contain the same address
			// array and index expressions are equivalent to pointer and
				offset expressions

		Increments or decrements to pointers are scaled; if the object being pointed
			to is four bytes, *p + 1 will increment the pointer by 4 bytes
			(1 * 4)

	Pointers to string constants
		char *sample;
		sample = "This is a sample message";
			// The pointer sample contains the address to the first element of
				the string constant This is a sample message\0
			// Pointer can be reassigned to another location. Doing this without
				assigning the current address to a temp pointer can result
				in orphaning

		char sample[] = "This is a sample message";
			// Contains the string constant This is a sample message\0 in an
				array that is exactly its size
			// Always refers to the same storage location

	Function pointers
		return type (*identifier)(*parameter data type/s)
		Example:
			int func2(char a, int b) {...};

			int func3(char a, int b) {...};

			void other(int (*func)(char, int)) {...};

			int (*func)(char, int);
			func = &func2;
			// some function that uses func
			func = &func3;
			// some function that uses func, but func contains the address of func3 now

			other(&func2); // other() uses a function pointer as its parameter
			other(&func3); 

	malloc
		allocate memory with specific size
		can return NULL if something goes wrong
		always terminate if malloc returns NULL

		Example:
		int * n = malloc( sizeof(int) );
		or
		int * n = malloc(4) where 4 is the size of an int in bytes

	free
		free memory allocated with malloc

		Example:
		free(n); // in relation to malloc example

	If, for example, strcpy doesn't exist, when creating an identical copy, use malloc to
		allocate memory for the copy, and then string2[0] = string1[0]
	
	Not using malloc before doing string2[0] = string1[0] will result in both pointing to
		the same memory address
	realloc				: realloc(<array to copy>, <size of final array>)

	valgrind			: a program that can be used to check memory-related issues
					: checks if all malloc'd memory are free'd

	scanf				: gets input and stores in variable address
		Example:

		int n;
		scanf("%i", &n);

		scanf("\n%c", &o);
			The \n before %c skips reading the newline from the previous input line

# STACK, HEAP
	heap overflow			: accessing areas of memory not supposed to be touched
	stack overflow			: happens when too many functions are called
	buffer overflow			: both heap and stack overflow are considered buffer overflow
	
	heap				: used for dynamic memory allocation
	stack				: used for static memory allocation
	
	When a new function is called, it is PUSHED onto the top of the stack
	When a a function finishes, it is POPPED off of the stack
	Last in, first out

# INPUT AND OUTPUT
	Text stream (input or output)
		Text input or output is processed as a sequence of characters until \n
		The newline character serves as a divider of streams

	int getchar(void)
		Reads and returns the next input character from a text stream with each call
		Value returned is actually int
	
	int putchar(int c)
		Prints the contents of int c as a character

# FILES
	Syntax:

		FILE * input = fopen("hi.txt", "r");

		FILE *			: declares the variable input as a file pointer
		input			: the pointer that contains the address of some file
		fopen()			: function used to open files
					: fopen(<filename>, <operation>)
					: looks in the current directory
		hi.txt			: file name
		r			: read mode (operation)

	buffer				: some place in memory where data read from a file
						is temporarily stored

	stdio.h				: contains file manipulation functions

	fopen()				: opens file
					: terminate if fopen() returns NULL
		FILE * ptr = fopen(<filename>, <operation>);
		or
		FILE * ptr1 = fopen("file.txt", a); // a is append, r is read, etc.
	
	fclose()			: closes the file pointed to
		fclose(<file pointer>);
	
	fgetc()				: read and return next character from file pointed to
					: file pointer must have the file opened for reading
		char ch = fgetc(<file pointer>);
	
		Example (mimics behavior of cat command in Linux):

		char ch;

		while ( (ch = fgetc(ptr) != EOF) );
		{
			printf("%c", ch);
		}
	
	fputc()				: write character into file
					: file pointer must have file opened for writing or appending
		fputc(<character>, <file pointer>);
	
	fread()				: reads <qty> units of size <size>  from the file pointed to,
						then stores that in memory pointed to by <buffer>
					: file pointer must have file opened for reading
		fread(<buffer>, <size>, <qty>, <file pointer>);

		fread(buffer, 1, 3, input) is interpretted as
			From the file being pointed to by "input", read 3 single-byte blocks and
			put those in the buffer "buffer"
		
			In this example, after 3 single-byte blocks have been read, the address
			contained by the file pointer is updated to the start of the next 3 single-
			byte blocks

			The size of the buffer should be the same as the size of each block being
			read

	fwrite()			: writes <qty> units of <size> to file pointed to by reading
						input from memory pointed to by <buffer>
					: file pointer must have file opened for writing or appending
		fwrite(<buffer>, <size>, <qty>, <file pointer>);

		Example:

		int arr[10];
		fwrite(arr, sizeof(int), 10, ptr);
	
	Check stdio.h for more file manipulation functions

# DATA STRUCTURES
Organizing data in memory
	Declaration:
		struct name {
			members
		} list of variables with this type;

		struct point {
			int x;
			int y;
		};

		Storage is reserved only if variables are listed after the terminating right brace

		struc point sample = { 100, 200 };
			The members of sample with type point are initialized to 100 and 200,
			respectively

		Referring to a member:
			structure-name.member

			sample.x or sample.y if accessing members of the example above

	Nested structures
		struct container {
			struct point sample1; // refer to struct point definition above
			struct point sample2;
		};

		Accessing members of this nested structure:
			struct container box;

			box.sample1.x	// refers to member x in struct point sample, which
					// is in turn a member of struct container box

	Pointers to structures
		struct name *sample_pointer;

		Example:
			struct point *sample_pointer;
			struct point pt1;
			sample_pointer = &pt1;

			(*sample_pointer).x // access member x of struct pointt pt1

			The () are necessary; *sample_pointer.x is illegal

		Shorthand:
			pointer->member

			struct point pt1;
			struct point *pp = &pt1;

			printf("%d\n", pp->x);

	Typedef
		Create new data type names
			typedef int new_int;
			// new_int and int are now synonymouse
	
	Typedef stuct
		typedefs struct {
			members
		} data type name;

		Example:
			typedef struct {
				char *name;
				char *gender;
			} person;

			person individual;

			individual.name = "Sample Name";
			individual.gender = "Sample gender";

	Queue
		FIFO
		enqueue			: add something to end of queue
		dequeue			: remove from queue, FIFO basis
	
	Stack
		LIFO
		push			: add to top of stack
		pop			: remove from top of stack
	
	Linked list
		Not stored in contiguous blocks of memory
		Square bracket notation usually used for arrays not possible
		Can connect values that are located in different areas of memory by
			using pointers
		Binary search not possible
		Can dynamically grow and shrink

		->			: arrow operator
					: go to address, then look inside a structure
					: same as using (*ptr).number, where number is a
						content of the struct that *ptr is pointing to
		
		Example:

		pointer0 contains the address of 1st node
		1st node contains a value and the address of the 2nd node
		2nd node contains a value and the address of the 3rd node
		Assuming that the 3rd node is the last struct, it will point to NULL to indicate
			the end of the linked list

		A node in a linked list may look like this:

			typedef struct node
			{
				int number;
				struct node * next; 	// a pointer that contains the address of the
							// next struct node
			}
			node;

	Trees
		Binary search trees	: center value becomes top of the tree
					: values less than center value go to one side
					: values greater than center value go to the other side
		
		A node in a BST may look like this

		typedef struct node
		{
			int number;
			struct node * left;
			struct node * right;
		}
		node;
	
	Dictionaries
		Contains key and value pairs
		Can achieve O(1)

	Hashing and Hash Tables
		Hashing			: taking a value and being able to output a value that becomes
						a shortcut of it later
					: implemented by bucketizing
		Hash function		: algorithm that reduces a large value to something small and
						predictable
		Hash Tables		: combination of arrays and linked lists
					: array of pointers to nodes
					: this is one of the ways to implement dictionaries
		Collisions		: when a value is added to a hash table but something already
						exists in the location
	
	Tries
		Trie (singular)
		Short for retrieval but pronounced like try/tries
		Always searchable in O(1)
		Takes a lot of memory

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# OTHER NOTES
	Preprocessing			- header files in code are included
	Compiling			- written code is converted to assembly code
	Assembling			- assembly code is converted to machine code
	Linking				- code from included libraries also converted
						to machine code, then combined with
						user's code. Executable file is then
						outputted

	Passed by value			- most variables in C are passed by value
					- arrays are an exception
					- means that a local copy is created in the receiving variable,
						the passing variable is unaffected by changes made to
						receiving variable
	Passed by reference		- arrays, pointers
					- passing variable and receiving variable both point to the
						same memory address
					- modifications to passing variable will affect receiving 
						variable, vice versa
