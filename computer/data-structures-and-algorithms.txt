DATA STRUCTURES AND ALGORITHMS

READ / WATCH LIST
- A Common-sense Guide to Data Structures and Algorithms (Jay Wengrow): position 414.1 / 1076, String Reversal

SOURCES
- The Last Algorithms Course You'll Need (The Primeagen)
- Introduction to Algorithms, third edition (Thomas Cormen)
- A Common-Sense Guide to Data Structures and Algorithms (Jay Wengrow)

CONTENTS
* DEFINITIONS
* DATA STRUCTURE OPERATIONS
// DATA STRUCTURES //
* ARRAYS
* ORDERED ARRAYS
* SETS
* HASH TABLES
* STACKS
* QUEUES

/////////////////////
* BIG O NOTATION

// ALGORITHMS //
* BINARY SEARCH
* BUBBLE SORT
* SELECTION SORT
* INSERTION SORT
* RECURSION

///////////////////////////////////////////////////////////////////////////////////////////////////
# DEFINITIONS
	Time complexity		: the speed of an operation
				: measuring the speed of an operation is also known as measuring
					its time complexity

# DATA STRUCTURE OPERATIONS
	Read			: looking something up by using a reference (usually the index)
				: in an array, this can be done in constant time since the
					index is provided
	Search			: checking if a particular value exists, and then possibly
					returning the index number (if array) of that value
				: in an array, the time complexity is O(n) since in the worst
					case scenario, the computer will have to go through
					all of the elements before finding the value being
					searched for or figuring out that the value doesn't
					exist in the array
	Insert			: adding new value/s to data structures
				: in an array, O(n) (technically n + 1 but the constant 1 is
					disregarded in Big O notation)
				: in the worst case, all elements have to be shifted one place
					to make space for the insertion
	Delete			: removing value/s from data structures
				: in an array, also O(n)

///// DATA STRUCTURES /////
# ARRAYS
	Contiguous block of memory used to store values of same data type (in C, at least)

# ORDERED ARRAYS
	Elements in ordered arrays always need to be in order

# SETS
	A data structure that doesn't allow duplicates
	For array-based sets:
		The time complexity of reading and searching is the same with arrays
		Inserting takes 2n steps (in arrays, only n steps) because the array
			has to be searched for duplicates, and then the insertion
			happens after the elements have been shifted to make space

# HASH TABLES
	A Common-sense Guide to Data Structures and Algorithms (Jay Wengrow), Chapter 8

	O(1)
	Very fast lookup, good for data access
	List of paired values (key and value)
	Hashing is computationally and storage space-efficient
	Hash function		: can be used to map data to fixed-size values
				: takes a key that is associated with data that can be
					retrieved
		Example:

		Royce -> 01
		Mark -> 02
		John -> 03
		Jane -> 04
	
	Hash value		: returned by Hash functions
	Collision		: when a slot in a hash table is already filled and an
					attempt to put new data there is made, a collision
					happens
	
	Separate chaining	: an example of a collision workaround
				: The existing data in the slot is replaced with a
					reference to another array. The colliding data
					is stored in that array
				: effectively turns the hash table to an array, O(n)
	
	Rule of thumb	: every 7 data elements stored in a hash table should have 10 memory
		slots
			: this ration is referred to as the "load factor"
			: so, the ideal load factor is 0.7 (7 divided by 10)

# STACKS
	Abstract data type (more of a theoretical concept, like sets)
	Can be achieved with various data structures like arrays, etc.
	Data can only be inserted and deleted from the end of the stack
	Only the last element of a stack can be read
	Push and pop
	LIFO
# QUEUES
	Abstract data type
	FIFO
	Enqueue and dequeue
	
//////////////////////////
# BIG O NOTATION
	Not an exact measurement, generalizes growth of algorithms
	Used to categorize algorithm time or memory requirements based on input
	Informs about the performance of algorithms and data structures

	How does the growth of the input affect performance and memory requirement?
	
	Capital letter O	: worst case (upper bound)
	Capital theta		: best case (lower bound) and worst case (upper bound) are the same
	Constants are dropped out

	In cases where the data set is small enough, slower algorithms with faster starts may still
		be used instead of faster algorithms with slower starts

	EXAMPLE 1 ( Linear, or O(n) )
		Take a string and iterate over it
		For every unit of the string, the loop has to be executed again
		The growth is LINEAR

	EXAMPLE 2 ( Constant time, or O(1) )
		Reading from an array takes the same number of steps no matter the size of input
	
	EXAMPLE 3 ( Quadratic time, O(n²) )
		A loop within a loop where a string is iterated over twice
	
	EXAMPLE 4 ( O(log n) )
		Binary search is an example
		O(log n) is shorthand for O(log₂ n)
		Refresher on logarithms:
			log₂ 8 = 3
			"How many 2s do I need to multiply together to get 8?"
			2 * 2 * 2 is 8, so log₂ 8 is 3
		Divide in half for each iteration

///// ALGORITHMS /////
# BINARY SEARCH
	O(log n)
	Start search by beginning in the middle
	Enables immediate elimination of half of the problem for each iteration

# BUBBLE SORT
	O(n²)
	Biggest numbers are placed at the end of the list, one by one
	Done by comparing the value being sorted with the value after it
	Ends when no swaps are done

# SELECTION SORT
	O(n²), although realistically only takes about half the time that bubble sort does
	Pass through list, keep lowest value in a variable
	At the end of the list, the lowest value is placed in the proper index,
		starting from 0 and incrementing with each pass through
	Repeat until entire list is sorted

# INSERTION SORT
	O(n²)
	Take this array: 4, 2, 7, 1, 3
	First pass through will start at the second element. Subsequent passthroughs will
		start at subsequent elements
	Current element is 2
	Store 2 in temporary variable, then remove from the array to create a gap
	Compare 2 to previous element (4)
	4 > 2, so shift it to the gap
	There are no more elements to compare/shift, so put 2 in the newly created gap
		after shifting 4 (index 0)
	Repeat until list is sorted

	42713
	24713
	12473	// In this iteration, 1 is shifted to index 0 in one go. The comparisons don't
		// end until there are no more elements to be shifted
	12347	// In this iteration, 3 is also shifted multiple times, from index 4 to index 2

# RECURSION
	A function calling itself
	Infinite loop if without base case
	Function calls are pushed to the top of the stack until base case is reached
	Once base case is reached, function calls are popped off the stack
	Can cause stack overflow if the computer runs out of memory due to excessive recursion
	Practical example: filesystem traversal where depth of subdirectories is unknown
