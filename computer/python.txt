PYTHON LANGUAGE NOTES

SOURCES:
	PYTHON CRASH COURSE (3RD EDITION) BY ERIC MATTHES

///// CONTENTS /////
# VARIABLES
# STRINGS
# VARIABLES IN STRINGS
# WHITESPACE
# INTEGERS
# FLOATS
# CONSTANTS
# LISTS
# ORGANIZING LISTS
# LENGTH OF A LIST
# LIST OF NUMBERS
# LIST COMPREHENSION
# PARTS OF LISTS
# COPYING A LIST
# TUPLES
# LOOPS
# IF STATEMENTS
# AND, OR
# IN, NOT
# DICTIONARIES
# SETS
# NESTING
# METHODS
# STATEMENTS
# FUNCTIONS

////////////////////////////////////////////////////////////////////////////////////////////////
# VARIABLES
	Variable names can only contain letters, numbers, and underscores
	Varable names can't start with numbers
	Don't use reserved words for variable names

# STRINGS
	A data type
	A series of characters
	Can be denoted with single quotes or double quotes

	Example of a quotation in a string:
		'They said "put quotation here"!'
	
	Example of apostrophe in string
		"This is an 'example'."

	Change to uppercase, lowercase, or Title Case using upper(), lower(), or title()
	
# VARIABLES IN STRINGS
	f-strings			: f stands for format
					: variables can be put inside f-strings

		final_var = f"{variable1} {variable2}"

		or

		printf(f"Hello, {final_var.title()}!")

# WHITESPACE
	\t				: tab
	\n				: newline

	Usage:
		print("Hi\t\n name")

	Remove whitespace using rstrip(), lstrip(), strip()

	Indentation matters syntactically in Python

# INTEGERS
	Operators: +, -, *, /, ** (exponents), parentheses, %
	Underscores can be used to make large numbers more readable:
		1000 is the same as 10_00 or 1_000
		Python will ignore the underscores
		This is applicable to all numbers in Python

# FLOATS
	Any number with decimal point
	Division always results to floats, even if the operands are both integers
	Mixing floats with integers in operations also results to floats

# CONSTANTS
	Use all capitals to indicate that a variable is constant
	
# LISTS
	Making list names plural is a good idea
	Similar to arrays, can also be accessed using indexes

	example = ['example1', 'example2', 'example3']
	example1 is at example[0]
	
	index -1 will return the last item in the list
	index -2 will return the second to the last item in the list
		, so on and so forth

	Can be used in f-strings
	Methods can be applied
		print(f"This is the item in the list: {example[0].upper()}.")

# MODIFYING LISTS
	append() can be used to add elements to the end of lists
	append() can also be used to add elements to an empty list
		listname.append('<item to append>')
	
	insert() can be used to add new elements to any position
		listname.insert(<index>, '<item to insert>')

	The del statement can be used to remove any element in a list
		del listname[<index number>]
	
	If the index number is not available, elements can be removed using remove()
		listname.remove('<item to remove>')
		# Only removes the first occurrence

	Elements can be popped off (removed but still available for use) lists with pop()
		popped_item = listname.pop(<index>)
		# The popped off item is in the variable popped_item

# ORGANIZING LISTS
	sort() sort alphabetically (default)
	sort(reverse=True) sorts in reverse alphabetical order
	sort cannot be udnone
		listname.sort()
			# Sorts the elements in the list
		print(listname)
			# Will print out alphabetically sorted list

	The function sorted() prints out sorted list but doesn't affect actual arrangement
		print(sorted(listname))
			# Will print out sorted list
			# Actual arrangement of list is not affected

	The method reverse() reverses the original sort of a list permanently
		listname = ['a', 'b', 'e', 'c', 'd']
		listname.reverse()
		print(listname)
			# will print out ['d', 'c', 'e', 'b', 'a']
			# not reverse alphabetical, just reversed the original list order

# LENGTH OF A LIST
	Find the length of a list using the function len()
		len(listname)

# LIST OF NUMBERS
	The function range() generates a series of numbers
		for number in range(1, 5)
			print(number)
				# 1 to 4 will be printed

		range(<start>, <end>, <step size>)
			start is inclusive, optional
			end is exclusive, required
			step size: for example, if this is 2, range() will count every 2
				numbers

	The function list() will convert arguments to a list
		print(list(range(1, 6)))
			# This will print [1, 2, 3, 4, 5]

	The function min(<list name>) returns the lowest number in the list
	The function max(<list name>) returns the highest number in the list
	The function sum(<list name>) returns the sum of all the numbers in the list

# LIST COMPREHENSION
	Combines for loop and creation of new elements in one line
		squares = [value**2 for value in range(1, 11)]
		print(squares)
			# This prints the square of the numbers from 1 to 10

		listname = [<expression> <for loop>]

# PARTS OF LISTS
	Slice				: a specific part of a list

		names = ["name1", "name2", "name3", "name4"]

		print(names[0:3])
			# This will print the elements at indexes 0, 1, and 2

		print(names[2:4])
			# This will print the elements at indexes 2 and 3

		print(names[:3])
			# This will print the elements at indexes 0, 1, and 2

		print(names[1:])
			# Print from index 1 to end of list

		print(names[-2:])
			# Print from the second to the last item up to the last item

		print(names[0:4:1])
			# Print from index 0 to index 3 while skipping 1 item between
			# items
	
	Looping through a slice
		for name in names[:3]:
			print(name)
				# Print each element up to index 2

# COPYING A LIST
	Create a slice from the start of the list up to the end by omitting the indexes
		names[:]
			# This creates a copy of the list

# TUPLES
	Immutable lists
	Tuples can't be modified but they can be written over
	Parentheses instead of square brackets

	Tuples with only 1 element should be defined like so:
		sample = (5,)
			# The comma is required even if there is only 1 element

	Tuples can be written over
		sample = (1, 2, 3)
		sample = (4, 5, 6)
			# The example above is valid

		sample (1, 2, 3)
		sample[0] = 5
			# The attempt to reassign sample[0] will produce an error

# LOOPS
	for loops
		In the example below, the for loop will take an element from the list
			names and associate that with the variable name until there
			is no more in the list

		names = ["name1", "name2", "name3"]

		for name in names:
			print(name)
				# Indented lines are inside the for loop

	To iterate a specified number of times:
		for counter in range(20)

	while loops
		counter = 1
		while counter <= 5
			# execute line/s of code here
			# counter += 1

	Flags for while loops
		A variable that can be modified (e.g. changed to True or False) by
			multiple events
		Can be used so that the while loop only has to check the flag instead
			of checking multiple events for each iteration
		Useful for programs where multiple conditions should stop the loop

		status = True
		while status:
			# execute code here
			if <conditional>:
				status = False

			if <conditional>:
				status = False

	break
		Exit loop immediately

	continue
		Return to the beginning of a loop
			while <conditional>
				if <conditional>
					continue

# IF STATEMENTS
	Example:
		if variable == "string":
			# line/s of code
		elif variable == "string2":
			# line/s of code
		elif variable == "string3":
			# line/s of code
		else:
			# line/s of code

	If the name of a list is used as a conditional test, it will return True if it
		has at least one element. Otherwise, False

		listname = [1, 2, 3]
		if listname:
			# line/s of code here will be executed since listname has at
				least one element

# AND, OR
	and
		True if all conditions are True, otherwise False
			(variable1 == 2) and (variable2 == 4)
	
	or
		True if one or more conditions are True, otherwise False
			(variable1 == 2) or (variable2 == 4)

# IN, NOT
	in
		Can be used to check if a value is in a list
			listname = [1, 2, 3]
			4 in listname
				# This will return False

	not
		Check if a value is not in a list
			listname = [1, 2, 3]
			4 not in listname
				# This will return True

# DICTIONARIES
	A collection of key-value pairs
	Dynamic

	Example:
		dictionary_0 = {"name" : "mark", "points" : 5}
		print(dictionary_0["name"])
			# will print the value in name (mark)
		print(dictionary_0["points"])
			# will print the value in points (5)

	An empty dictionary:
		dictionary_0 = {}

	To add new key-value pairs:
		dictionary_0 = {"name" : "mark"}
		print(dictionary_0)
			# will print out {'name' : 'mark'}

		dictionary_0["color"] = "green"
		dictionary_0["x_coord"] = 100
		print(dictionary_0)
			# will print out {'name' : 'mark', 'color' : 'blue', 'x_coord' : 100}

	To reassign values in a dictionary:
		dictionary_0[<key>] = <new value>
	
	To remove key-pair values:
		del dictionary_0[<key>]
			# This will remove the key and its paired value

	get() method:
		can be used instead of square bracket notation if unsure about existence
			of key in dictionary

		variable = dictionary.get("points", "Key doesn't exist")
			# first argument is the key, value is returned if this exists in
				the dictionary
			# second argument is returned if the key doesn't exist in the
				dictionary
			# if second argument is not provided, None is returned instead

	items() method:
		can be used to loop through a dictionary

		for var_key, var_val in dictionary.items():
			# where var_key is the variable for the key (can have other names)
			# where var_val is the variable for the value (can have other names)

	keys() method:
		can be used to loop through a dictionary while only accessing keys
		
		for var_key in dictionary.keys():
			print(var_key)

		produces the same behavior as

		for var_key in dictionary:
			print(var_key)

		can be omitted or included for improved readablity

	values() method:
		can be used to loop through a dictionary while only accessing values

	set() function:
		filter out duplicates

		for var_val in set(dictionary.values()):
			# line/s of code here

# SETS
	List without duplicates
	Curly brackets

	set_sample = {'sample1', 'sample2', 'sample3'}

# NESTING
	Can store a data structure within a data structure

	A List of Dictionaries
		dict1 = {'key1' : 'val1', 'key2' : 'val2'}
		dict2 = {'key1' : 'val2', 'key2' : 'val2'}

		dicts = [dict1, dict2]

		It's possible to loop through the list of dictionaries:
			for dict in dicts:

	A List in a Dictionary
		Can associate a list with a key if more than 1 value is necessary

		dict1 = {
			'name1' : ['val1-1', 'val1-2']
			'name2' : ['val2-1', 'val2-2'],
			}

	A Dictionary in a Dictionary
		dict1 = {
			'dict1-1' : {
				    'key1' : 'val1',
				    'key2' : 'val2',
				    }
			}

# INPUT
	input(<prompt>) function
		Pauses program while waiting for input, and then stores input in a
			variable
		Interprets input as a string, even numbers

		variable = input("This is a message to prompt the user for input: ")

	Multiline prompts for the input() function
		prompt = "Line 1 prompt"
		prompt += "\nLine 2 prompt: "
			# helps with readability

	int() function
		Interprets input as numbers
			answer = input("Question? ")
			answer = int(answer)

# METHODS
	Actions that can be performed on data

	Usage encountered so far:
		variable.method()

		.title()			: change each word to Title Case
		.upper()			: change to upper case
		.lower()			: change to lower case
		.rstrip()			: remove extra whitespace to the right of string
		.lstrip()			: remove extra whitespace to the left of string
		.strip()			: remove extra whitespace on both sides of string
		.removeprefix()			: remove specified character/s
			variable = 'https://www.samplesite.com'
			variable.removeprefix('https://')
			This will print www.samplesite.com

		.removesuffix()			: works the same as removeprefix(), but for suffixes
		.append()			: add to end of list
						: can also add elements to empty list
		.insert()			: add elements to any position in a list
		.pop()				: remove item in specified index from list and make
							available for use
		.remove()			: remove item from list using value, not idex
		.sort()				: sort permanently, default is alphabetical
		.reverse()			: reverse order of the list (different from
							reverse alphabetical sort)
		.get()				: get value of specified key
						: if key doesn't exist, this can return a default
							value
		.items()			: can be used to loop through a dictionary
		.keys()				: can be used to loop through dictionaries while
						only accessing keys

# STATEMENTS
	Usage encountered so far:
		statement list[index]

		del listname[<index>]		: delete element at specified index number

# FUNCTIONS
	Modules					: separate files where functions can be stored

	To define a function:
		def function_name(<argument/s>):
			"""docstring"""
			# line/s of code here
			# line/s of code here

		function_name()

		docstring			: describes what the function does
						: enclosed in triple quotes
	
	Positional arguments			: need to be passed in the same order in the
							function definition

	Keyword arguments			: name-value pair passed to functions
		function(variable="value", variable2="value2")
		
			is equivalent to

		function(variable2="variable2", variable="value")

			the order of arguments doesn't matter

	Default values
		def function(variable, variable2="value2")
			# a default value is given for variable2 only
			# arguments without default values have to be placed first

	Usage encountered so far:
		print(function(list))

		sorted()			: prints sorted list but doesn't affect actual
							arrangement
		len()				: get list length
		range()				: takes 3 arguments, start at first argument, ends
							at 2nd argument - 1, 3rd argument is step
							size
		list()				: convert to list
		min()				: returns lowest number
		max()				: returns highest number
		sum()				: returns sum of all numbers in list
		set()				: filters out duplicate from data structures
		input()				: pauses program while waiting for user input
