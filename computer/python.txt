PYTHON LANGUAGE NOTES

SOURCES:
	PYTHON CRASH COURSE (3RD EDITION) BY ERIC MATTHES
	INTRODUCTION TO COMPUTATION AND PROGRAMMING (3RD EDITION) BY JOHN V. GUTTAG

///// CONTENTS /////
# RESERVED WORDS
# VARIABLES
# OPERATORS
# TYPE CASTS
# CHARACTER ENCODING
# STRINGS
# VARIABLES IN STRINGS
# WHITESPACE
# INTEGERS
# FLOATS
# CONSTANTS
# LISTS
# ORGANIZING LISTS
# LENGTH OF A LIST
# LIST OF NUMBERS
# LIST COMPREHENSION
# PARTS OF LISTS
# COPYING A LIST
# TUPLES
# LOOPS
# IF STATEMENTS
# AND, OR
# IN, NOT
# DICTIONARIES
# SETS
# NESTING
# METHODS
# FUNCTIONS
# CLASSES
# INHERITANCE
# COMPOSITION
# THE PYTHON STANDARD LIBRARY
# FILES
# EXCEPTIONS
# STORING DATA
# REFACTORING
# TESTS
# PYGAME AND ALIEN INVASION

///// REFRESHER /////
RESERVED WORDS, OPERATORS, TYPE CONVERSION, CHARACTER ENCODING, INPUT, VARIABLES IN STRINGS, LISTS

////////////////////////////////////////////////////////////////////////////////////////////////
# RESERVED WORDS
	and, as, assert, async, await, break, class, continue, def, del, elif, else, except,
	False, finally, for, from, global, if, import, in, is, lambda, nonlocal, None, not,
	or, pass, raise, return, True, try, while, with, yiel
	
# VARIABLES
	Variable names can only contain letters, numbers, and underscores
	Varable names can't start with numbers
	Don't use reserved words for variable names

# OPERATORS
	type
		shows data type of operand
	//
		floor division
		truncates remainder
		6//4 evaluates to 1, while 6/4 evaluates to 1.5
	
	+, -, *, **, /, %

# TYPE CASTS
	AKA type conversions

	int("3") * 4 evaluates to 12

	int(int_var * float_var) evaluates to an int

	Converting from float to int truncates the fractional part

# CHARACTER ENCODING
	Add this as 1st or 2nd line to tell Python which character encoding system to use:
		# -*- coding: encoding name -*-
	
	Example:
		# -*- coding: utf-8 -*-

# STRINGS
	str

	A data type
	A series of characters
	Can be denoted with single quotes or double quotes

	Example of a quotation in a string:
		'They said "put quotation here"!'
	
	Example of apostrophe in string
		"This is an 'example'."

	Change to uppercase, lowercase, or Title Case using upper(), lower(), or title()
	
# VARIABLES IN STRINGS
	f-strings			: f stands for format
					: variables can be put inside f-strings

		final_var = f"{variable1} {variable2}"

		or

		print(f"Hello, {final_var.title()}!")

		print(f"{{{10 * 2}}}") # two curly braces to print {
			This will print {20} # with the curly braces

		print(f"{1.2345:.3f}") # modifier after the colon
			This will print 1.234

		print(f"{1000:,}")
			This will print 1,000

# WHITESPACE
	\t				: tab
	\n				: newline

	Usage:
		print("Hi\t\n name")

	Remove whitespace using rstrip(), lstrip(), strip()

	Indentation matters syntactically in Python

# INTEGERS
	Operators: +, -, *, /, ** (exponents), parentheses, %
	Underscores can be used to make large numbers more readable:
		1000 is the same as 10_00 or 1_000
		Python will ignore the underscores
		This is applicable to all numbers in Python

# FLOATS
	Any number with decimal point
	Division always results to floats, even if the operands are both integers
	Mixing floats with integers in operations also results to floats

# CONSTANTS
	Use all capitals to indicate that a variable is constant
	
# LISTS
	Making list names plural is a good idea
	Similar to arrays, can also be accessed using indexes

	example = ['example1', 'example2', 'example3']
	example1 is at example[0]
	
	index -1 will return the last item in the list
	index -2 will return the second to the last item in the list
		, so on and so forth

	Can be used in f-strings
	Methods can be applied
		print(f"This is the item in the list: {example[0].upper()}.")

# MODIFYING LISTS
	append() can be used to add elements to the end of lists
	append() can also be used to add elements to an empty list
		listname.append('<item to append>')
	
	insert() can be used to add new elements to any position
		listname.insert(<index>, '<item to insert>')

	The del statement can be used to remove any element in a list
		del listname[<index number>]
	
	If the index number is not available, elements can be removed using remove()
		listname.remove('<item to remove>')
		# Only removes the first occurrence

	Elements can be popped off (removed but still available for use) lists with pop()
		popped_item = listname.pop(<index>)
		# The popped off item is in the variable popped_item

# ORGANIZING LISTS
	sort() sort alphabetically (default)
	sort(reverse=True) sorts in reverse alphabetical order
	sort cannot be udnone
		listname.sort()
			# Sorts the elements in the list
		print(listname)
			# Will print out alphabetically sorted list

	The function sorted() prints out sorted list but doesn't affect actual arrangement
		print(sorted(listname))
			# Will print out sorted list
			# Actual arrangement of list is not affected

	The method reverse() reverses the original sort of a list permanently
		listname = ['a', 'b', 'e', 'c', 'd']
		listname.reverse()
		print(listname)
			# will print out ['d', 'c', 'e', 'b', 'a']
			# not reverse alphabetical, just reversed the original list order

# LENGTH OF A LIST
	Find the length of a list using the function len()
		len(listname)

# LIST OF NUMBERS
	The function range() generates a series of numbers
		for number in range(1, 5)
			print(number)
				# 1 to 4 will be printed

		range(<start>, <end>, <step size>)
			start is inclusive, optional
			end is exclusive, required
			step size: for example, if this is 2, range() will count every 2
				numbers

	The function list() will convert arguments to a list
		print(list(range(1, 6)))
			# This will print [1, 2, 3, 4, 5]

	The function min(<list name>) returns the lowest number in the list
	The function max(<list name>) returns the highest number in the list
	The function sum(<list name>) returns the sum of all the numbers in the list

# LIST COMPREHENSION
	Combines for loop and creation of new elements in one line
		squares = [value**2 for value in range(1, 11)]
		print(squares)
			# This prints the square of the numbers from 1 to 10

		listname = [<expression> <for loop>]

		or

		<variable> = [<expression> for <element> in <iterable> if <test>]

	It is possible to have multiple for loops in a list comprehension
		list = [(x, y)
			for x in range(10) if x % 2 == 0
			for y in range(10) if x % 3 == 0]

# PARTS OF LISTS
	Slice				: a specific part of a list

		names = ["name1", "name2", "name3", "name4"]

		print(names[0:3])
			# This will print the elements at indexes 0, 1, and 2

		print(names[2:4])
			# This will print the elements at indexes 2 and 3

		print(names[:3])
			# This will print the elements at indexes 0, 1, and 2

		print(names[1:])
			# Print from index 1 to end of list

		print(names[-2:])
			# Print from the second to the last item up to the last item

		print(names[0:4:1])
			# Print from index 0 to index 3 while skipping 1 item between
			# items
	
	Looping through a slice
		for name in names[:3]:
			print(name)
				# Print each element up to index 2

# COPYING A LIST
	Create a slice from the start of the list up to the end by omitting the indexes
		names[:]
			# This creates a copy of the list

# TUPLES
	Immutable ordered sequences of elements
	Tuples can't be modified but they can be written over
	Can contain elements with different types
	Parentheses instead of square brackets

	Tuples with only 1 element should be defined like so:
		sample = (5,)
			# The comma is required even if there is only 1 element

	Tuples can be written over
		sample = (1, 2, 3)
		sample = (4, 5, 6)
			# The example above is valid

		sample (1, 2, 3)
		sample[0] = 5
			# The attempt to reassign sample[0] will produce an error

# LOOPS
	for loops
		In the example below, the for loop will take an element from the list
			names and associate that with the variable name until there
			is no more in the list

		names = ["name1", "name2", "name3"]

		for name in names:
			print(name)
				# Indented lines are inside the for loop

	To iterate a specified number of times:
		for counter in range(20)

	while loops
		counter = 1
		while counter <= 5
			# execute line/s of code here
			# counter += 1

	Flags for while loops
		A variable that can be modified (e.g. changed to True or False) by
			multiple events
		Can be used so that the while loop only has to check the flag instead
			of checking multiple events for each iteration
		Useful for programs where multiple conditions should stop the loop

		status = True
		while status:
			# execute code here
			if <conditional>:
				status = False

			if <conditional>:
				status = False

	break
		Exit loop immediately

	continue
		Return to the beginning of a loop
			while <conditional>
				if <conditional>
					continue

# IF STATEMENTS
	Example:
		if variable == "string":
			# line/s of code
		elif variable == "string2":
			# line/s of code
		elif variable == "string3":
			# line/s of code
		else:
			# line/s of code

	If the name of a list is used as a conditional test, it will return True if it
		has at least one element. Otherwise, False

		listname = [1, 2, 3]
		if listname:
			# line/s of code here will be executed since listname has at
				least one element

# AND, OR
	and
		True if all conditions are True, otherwise False
			(variable1 == 2) and (variable2 == 4)
	
	or
		True if one or more conditions are True, otherwise False
			(variable1 == 2) or (variable2 == 4)

# IN, NOT
	in
		Can be used to check if a value is in a list
			listname = [1, 2, 3]
			4 in listname
				# This will return False

	not
		Check if a value is not in a list
			listname = [1, 2, 3]
			4 not in listname
				# This will return True

# DICTIONARIES
	A collection of key-value pairs
	Dynamic

	Example:
		dictionary_0 = {"name" : "mark", "points" : 5}
		print(dictionary_0["name"])
			# will print the value in name (mark)
		print(dictionary_0["points"])
			# will print the value in points (5)

	An empty dictionary:
		dictionary_0 = {}

	To add new key-value pairs:
		dictionary_0 = {"name" : "mark"}
		print(dictionary_0)
			# will print out {'name' : 'mark'}

		dictionary_0["color"] = "green"
		dictionary_0["x_coord"] = 100
		print(dictionary_0)
			# will print out {'name' : 'mark', 'color' : 'blue', 'x_coord' : 100}

	To reassign values in a dictionary:
		dictionary_0[<key>] = <new value>
	
	To remove key-pair values:
		del dictionary_0[<key>]
			# This will remove the key and its paired value

	get() method:
		can be used instead of square bracket notation if unsure about existence
			of key in dictionary

		variable = dictionary.get("points", "Key doesn't exist")
			# first argument is the key, value is returned if this exists in
				the dictionary
			# second argument is returned if the key doesn't exist in the
				dictionary
			# if second argument is not provided, None is returned instead

	items() method:
		can be used to loop through a dictionary

		for var_key, var_val in dictionary.items():
			# where var_key is the variable for the key (can have other names)
			# where var_val is the variable for the value (can have other names)

	keys() method:
		can be used to loop through a dictionary while only accessing keys
		
		for var_key in dictionary.keys():
			print(var_key)

		produces the same behavior as

		for var_key in dictionary:
			print(var_key)

		can be omitted or included for improved readablity

	values() method:
		can be used to loop through a dictionary while only accessing values

	set() function:
		filter out duplicates

		for var_val in set(dictionary.values()):
			# line/s of code here

# SETS
	List without duplicates
	Curly brackets

	set_sample = {'sample1', 'sample2', 'sample3'}

# NESTING
	Can store a data structure within a data structure

	A List of Dictionaries
		dict1 = {'key1' : 'val1', 'key2' : 'val2'}
		dict2 = {'key1' : 'val2', 'key2' : 'val2'}

		dicts = [dict1, dict2]

		It's possible to loop through the list of dictionaries:
			for dict in dicts:

	A List in a Dictionary
		Can associate a list with a key if more than 1 value is necessary

		dict1 = {
			'name1' : ['val1-1', 'val1-2']
			'name2' : ['val2-1', 'val2-2'],
			}

	A Dictionary in a Dictionary
		dict1 = {
			'dict1-1' : {
				    'key1' : 'val1',
				    'key2' : 'val2',
				    }
			}

# INPUT
	input(<prompt>) function
		Pauses program while waiting for input, and then stores input in a
			variable
		Interprets input as a string, even numbers

		variable = input("This is a message to prompt the user for input: ")

	Multiline prompts for the input() function
		prompt = "Line 1 prompt"
		prompt += "\nLine 2 prompt: "
			# helps with readability

	int() function
		Interprets input as numbers
			answer = input("Question? ")
			answer = int(answer)

# METHODS
	A function that is part of a class is a method
	Actions that can be performed on data

	Helper method: a method that isn't meant to be used by code outside the
		class. Indicated by a single leading underscore

# FUNCTIONS
	Modules				
		Separate .py files where functions can be stored
		
		To import modules:
			import module_name
			# module_name should contain the code that needs to be imported
			# .py is omitted from module_name.py when importing

		To call function in imported module:
			module_name.function()

		To import specific functions from modules:
			from module_name import function_name1, function_name2
			# if imported this way, no need for dot notation
		
	Aliases
		Alternate names using "as"

		To import and then give alias to functions:
			from module_name import function_name1 as fn1
			# fn1 is the alias for function_name1

		Alias for modules
			import module_name as mn

	To define a function:
		def function_name(<argument/s>):
			"""docstring"""
			# line/s of code here
			# line/s of code here

		docstring			: describes what the function does
						: enclosed in triple quotes

		Ideal usage
			"""
			Assumes that x is int, y is float # Assumptions
			Returns (sample result), else 0 # Guarantees
			"""
	
	Positional arguments			: need to be passed in the same order in the
							function definition

	Keyword arguments			: name-value pair passed to functions
		function(variable="value", variable2="value2")
		
			is equivalent to

		function(variable2="variable2", variable="value")

			the order of arguments doesn't matter

	Default values
		def function(variable, variable2="value2")
			# a default value is given for variable2 only
			# arguments without default values have to be placed first

	To prevent a function from modifying a passed list, a copy can be passed instead
		function_name(list[:])

	To allow functions to take an arbitrary number of arguments through the unapcking
		operator:

		function_name(argument, *argument2, **argument3)
			# the asterisk means that argument2 will be a tuple containing
			# all the arguments received by the function
			# *argument2 is a tuple even if there is only 1 argument provided
			# arbitrary arguments must be placed last

		function_name(**argument3)
			# **argument3 is a dictionary instead of a tuple

	Lambda expression
		Can be used to create anonymous functions

		lambda sequence of variable names : expression

		lambda x, y : x * y
			# this returns a function that returns the product of x and y

# CLASSES
	Instantiation
		Making an object from a class
		Multiple instances can be created from a single class

	To create a class:
		class Name:
			# Capitalize class names
			"""Concise description"""

			def __init__(self, arg1, arg2)
				"""Concise description"""
				# Always use two leading and trailing underscores
				# self is automatically passed, no need to provide an
					argument when this method is called
				# Any variable prefixed with self is available to every
					method in the class
				self.var1 = arg1
				self.var2 = arg2
					# Attributes: variables accessible through instances
			
			def function1(self):
				"""Concise description"""
				# line/s of code here

	To create an instance from a class:
		class Name:
			# copy code from above

		my_name = Name(arg1, arg2)
			# This is an instance of the class Name

		print(f"Sample: {my_name.var1}")
		print(f"Sample: {my_name.var2}")

	Attributes
		Use dot notation to access attributes of instances:
			my_name.var1 # var1 is an attribute of my_name

		Default values for attributes:
			def __init__(self, arg1, arg2):
				self.var1 = arg1
				self.var2 = arg2
				self.var3 = <some default value>
					# No argument provided for var3, but it can be
						defined in __init__

		Modifying attribute values directly:
			Access directly through instances
				# Assume that class Name has __init__() above
				my_name = Name(arg1, arg2)
				my_name.var3 = <some new value>
					# No argument provided for var3

			Through methods
				# Assume that class Name has __init__() above
				# Assume that the method below is part of class Name
				def update_var3(self, new_val):
					self.var3 = new_val
				
				my_name.update_var3(<some new value>)
			
			Incrementing using methods
				# Take code above with these modifications:
				def increment_var3(self, increment):
					self.var3 += increment

	Calling methods:
		Use dot notation to access methods of instances
			my_name.function1()
	
	Classes can also be stored in modules
	Importing a single class
		A class can be stored in a .py file
		The file should begin with a doctring that describes the contents
			of the file
		
		# Assume that the module is named filename.py
		from filename import Class_name
			# .py is omitted intentionally
			# Proceed to use classes as usual
	
	Storing multiple classes in a module
		Classes stored in a single module should be related
	
	Importing multiple classes from a module
		from filename import Class1, Class2
		# Proceed to use classes as usual
	
	Importing an entire module
		Easy to read because every call includes the module name
		
		import filename

		new_instance = filename.Class1(arg1, arg2)
	
	Importing a module into a module
		Example: if a child class is stored in a separate module from its
		parent class, the parent class can be imported into the child'said
		module
	
	Aliases
		from module_name import Class1 as C1
			# C1 is the alias

# INHERITANCE
	The child class (specialized version of parent) inherits from the parent class
	Child class is aka subclass
	Parent class is aka superclass

	It's possible to use the parent's __init__() for the child class:
		class Parent_c:
			# The parent class has to be in the same file
			# The parent class has to be written before
				the child class
			# Parent class details here

		class Child_c(Parent_c):
			def __init__(self, arg1, arg2):
				"""Initialize attributes of parent class"""
				super().__init__(arg1, arg2)
					# super() allows the child to call methods
					 	from its parent
					# arg1 and arg2 are used here
				self.var3 = <some initial value>
					# This will affect all Child_c instances
						but not Parent_c instances

	To override methods from parent class:
		In the child class, create a method with the same name as a method from
			the parent class
		The method from the parent class will be disregarded
	
# COMPOSITION
	Breaking a large class into smaller classes that work together
	
	class Parent:
		# Details for the parent class here

	class Class1:
		# Does not inherit from any class
		# Details for the class here
		def sample_method(self):
			# Details of the method here

	class Child(Parent):
		# Details of the child class here
		# See example Child_c above for the details
		self.var1 = Class1()
			# This is an instance used as attribute
	
	Usage would look like this:
		new_instance = Child(arg1, arg2)
		new_instance.var1.sample_method()

# THE PYTHON STANDARD LIBRARY
	Standard libraries can be included by using import at the beginning of each
		file
	The list below is not complete, just some basic ones to get started:

	random
		randint(<arg1>, <arg2>):
			Returns random integer between arg1 and arg2, inclusive

		choice(<list or tuple>):
			Returns randomly chosen element from list or tuple

# FILES
	Reading file contents
		from pathlib import Path
			# Can also be import pathlib, and then the line below
				will have to be path = pathlib.Path()

		path = Path("filename.txt")
			# Points to a file
			# Can use absolute or relative path here
		contents = path.read_text()
			# Reads entire contents
			# read_text() creates newline when EOF
		contents = contents.rstrip()
			# Removes right whitespace created by read_text()
			# Can also use method chaining:
				contents = path.read_text().rstrip()
		print(contents)
			# Prints entire contents
	
	Relative file path:
		Path to dir or file relative to the current directory
	
	Absolute file path: 
		Exact location of dir or file on the computer

	To turn long strings into sets of lines, use splitlines():
		path = Path("pi_digits.txt")
		contents = path.read_text()
		lines = contents.splitlines()
		for line in lines:
			# This allows manipulation per line
	
	Specific parts of lines can also be isolated using by slicing
	Lines/strings can be treated as Lists (slice, "in", etc.)
	
	To work on numbers read from files, convert first using function int()
		or function float()

	write_text() method
		Write to a file using this method
		Creates new file if file in path doesn't exist yet
		Closes file properly after writing string

	Writing multiple lines to file
		content = "Content 1.\n"
		content += "Content 2.\n"

		path = pathlib.Path("text.txt")
		path.write_text(content)
			# text.txt will contain:
				Content 1.
				Content 2.
	
	To write numerical data into a file, use function str()

# EXCEPTIONS
	Created by Python to manage errors

	Exception objects:
		If handled, program will keep running
		If not handled, traceback
	
	try-except blocks (with else)
		Used to handle exceptions
		Can prevent crashes since the program continues
			to run if exceptions are handled

		try:
			print(5/0)
		except ZeroDivisionError:
			print("You can't divide by zero!")
		else:
			# code to execute if try is successful

		pass can be used under except to handle exceptions
			silently	

# STORING DATA
	JSON files
		JavaScript Object Notation
		Can be used by other languages, not just JavaScript
		
	json.dumps(<data to be converted to JSON format>)
		Takes 1 argument
		Returns string (converted to JSON representation) which
			can be written to a file

		import pathlib
		import json

		numbers = [1, 2, 3]

		path = pathlib.Path("numbers.json")
		contents = json.dumps(numbers)
		path.write_text(contents)

	json.loads()
		import pathlib
		import json

		path = pathlib.Path("numbers.json")
		contents = path.read_text()
		numbers = json.loads(contents)

	exists() method
		Returns True if a file or dir exists, otherwise False
		
		path.exists()

# REFACTORING
	Improving existing code by making it cleaner
	If possible, parts of the code can be encapsulated into functions
		to improve readability and to make it easier to extend
	A function should be focused on its main task
	If a function is doing more than 1 thing, it might be possible to
		put the other tasks in other functions
	Good practice: return None
		A function should return an expected value or None

# TESTS
	Functions and classes can be tested

	Unit test
		Verifies if a specific aspect of a function behaves correctly
	Test case
		A collection of unit tests
		Proves that a function behaves correctly
	
	Test files and functions must begin with test_ because pytest will
		look for those
			test_name_function.py

	Functions to be tested must be imported into the test file

	Test functions should have descriptive names so that reading the test
		report is easier
	
	Assertion
		A claim about a condition
		Can be any conditional statement, including "in" and "not"
		
		assert formatted_name == "Mark Beltran"
	
	python3.11 -m pytest
		In a terminal, navigate to dir where the test file is located
		Run this code to begin test

	Testing Classes
		Fixtures
			Functions with this decorator: @pytest.fixture
			Can be used to remove repitition in test code

			@pytest.fixture
			def function_name(arg1, arg2):
				var_1 = "Sample value"
				var_2 = ImportedClass(var_1)
				return var_2
			
			Assume that the 2 lines above return var_2 have been
				repeated in other functions defined in the test
				file
			The fixture is used to create the ImportedClass instance
				var_2, which can be used by other functions
				instead of repetitively creating instances in
				their function definitions
			In other words, fixtures can be used to generate
				resources used by multiple test functions

		Decorator
			@pytest.fixture
				# Needs import pytest
			def function_name(arg1, arg2)

# PYGAME AND ALIEN INVASION
	Definitions:
		pygame documentation: https://www.pygame.org/docs/

		Surface
			Part of the screen where game elements can be displayed
			Each element (like ships, aliens, etc.) is also its own surface
			The game window is also a surface
			In Alien Invasion, the surfaces are redrawn with every pass through
				the loop
		
		Event
			An action by the player of the game

		Framerate control
			Can be controlled using a clock
			In Alien Invasion, 1 ticke per pass through main loop

		Changing color
			RGB (255, 255, 255)

		Settings
			Good practice: store in a module with class dedicated to settings
				Easier to modify behavior, more organized

		Adding images
			Check license
			Pygame loads bitmaps by default

	Notes on Alien Invasion code:
		pygame.init()
			Initialize all imported pygame modules
			If speed is being prioritized, initialize different modules
				separately
		
		pygame.display.set_mode((size))
			The set_mode() function in module pygame.display initializes a
				display window or screen
			Creates a display Surface
			Accepts arguments for size: width and height in () respectively

		pygame.event.get()
			Gets events from queue

		pygame.QUIT event type
			Calls sys.exit() to exit the game

		pygame.display.flip()
			Make most recently drawn screen visible

		pygame.time.Clock()
			Create Clock object to track time and framerate

		self.clock.tick(<framerate>)
			Loop will attempt to run at specified framerate
		
		self.screen.fill(self.bg_color)
			The fill() method takes 1 argument (color) and acts on one surface

		pygame.image.load(<path to file>)
			Load image from a file source

		blit() method
			Used to draw images
		
		get_rect() method
			Returns new rectangle covering entire surface

		rect objects
			Can be positioned using the x and y coordinates of the top, bottom,
				left, and right edges, and also the middle of the rect
			Attributes center, centerx, or centery can be used when centering
				rects
			Attributes top, left, bottom, and right can be used when working
				with the edges of the screen
			The attributes above can also be combined: midleft, midbottom, etc.

