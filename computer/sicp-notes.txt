STRUCTURE AND INTERPRETATION OF COMPUTER PROGRAMS (2ND EDITION)
by Harold Abelson, Gerald Jay Sussman, and Julie Sussman

CONTENTS
* ELEMENTS OF PROGRAMMING
* NAMING AND THE ENVIRONMENT
* EVALUATING COMBINATIONS
* COMPOUND PROCEDURES
* CONDITIONAL EXPRESSIONS AND PREDICATES
* PROCEDURES AS BLACK-BOX ABSTRACTIONS
* INTERNAL DEFINITIONS AND BLOCK STRUCTURE
* LINEAR RECURSION AND ITERATION
* TREE RECURSION

# ELEMENTS OF PROGRAMMING
	Primitive expressions			: represent the simplest entities in the language
						: examples below:
							numbers, primitive procedures
	Primitive procedures			: operators such as +, *, etc.

	Combinations				: example below:
							(+ 1 2)
						: compound expressions represent the application
							of the procedure to the numbers in the
							example above

	Nested Combinations			: example below:
							(+ (* 3 4) (- 8 6))

# NAMING AND THE ENVIRONMENT
	Variables				: names used to refer to computational objects/
							values
						: variables can also be used to contain complex
							objects, see below
						: example below:
							(define pi 3.1416)
							(define pisquared (* pi pi))
	
	Environment				: memory that keeps track of variables and values

	Machine instructions are stored as values for symbols such as + and * in the global
		environment
	
# EVALUATING COMBINATIONS
	Procedure
		Evaluate the subexpressions of the combination
		Apply the operators to the arguments

	Evaluation is recursive in nature

	Special forms				: example below:
							(define x 3)
						: not combinations
	
	Applicative order evaluation		: the interpreter evaluates the operator and
							operands first, and then applies to
							arguments

	Normal order evaluation			: substitute all parameters with expressions, and
							then evaluate
						: fully expand and then reduce

# COMPOUND PROCEDURES
	Procedure definition - a compound operation can be named and referred to as a unit using
		this method of abstraction

		Syntax: (define (<name> <formal parameters>) (<body>))

		Example of a compound procedure:
			(define (square x) (* x x))

	Compound procedures like the one in the example above can also be used as building blocks
		for other procedures

		Example:
			(define (sum-of-squares x y) (+ (square x) (square y))

# CONDITIONAL EXPRESSIONS AND PREDICATES
	cond					: stands for conditional
						: can have a sequence of consequent expressions,
							as opposed to (if) which can only have
							1 consequent and 1 alternative

	Conditional expressions are generally expressed as:
		(cond (<predicate> <consequent expression>))

		Predicate			: expressions or procedures that return true or
							false
		Consequent expression		: will be returned as the value of the conditional
							expression if <predicate> evaluates to true
		
		Predicate and consequent expression are called clauses
		
	Example:
		(define (abs x)
		  (cond ((> x 0) x)
			((= x 0) 0)
			((< x 0) (-x))))

		Each predicate will be examined until one is evaluated as true
		The value of cond is undefined if no predicate is evaluated as true

		>, <, and = are Primitive Predicates
	
	else					: special form
						: can be used together with cond

	if					: special form
						: can be used only when there are two cases
						: (if <predicate> <consequent> <alternative>)

		If the predicate is true, the value of the consequent will be returned. Otherwise,
			the value of the alternative will be returned

		Re-doing the example above:

		(define (abs x)
		  ( if (x < 0)
		       (- x)
		       x))
	
	Logical composition operations (and), (or), and (not) can be used to create compound
		predicates
		
		and				: if any expression evaluates to false, this is
							false and the rest of the expressions
							are not evaluated
						: if all expressions evaluate to true, the value
							of the last expression is returned
		or				: returns the value of the first expression that
							evaluates to true
						: if all expressions are false, this is false
		not				: invert value

# PROCEDURES AS BLACK-BOX ABSTRACTIONS
	Divide program into modular parts, each focusing on a task
	Each modular part should be used as building blocks for other procedures

	When looking at the bigger picture / bigger part of the solution, abstract away the
		details of how the smaller parts work
	Focus is on the input and output of each modular part, rather than how each procedure
		works
	
	Keep variables local to their procedures to avoid confusion and errors
	"Bound variables declared as the formal parameters of a procedure has the body of the
		procedure as their scope"

# INTERNAL DEFINITIONS AND BLOCK STRUCTURE
	Block structure
		The scope of smaller procedures (the building blocks) can be restricted to one
			bigger procedure
		In other words, a big procedure can have internal definitions for these smaller
			procedures, and this limits the scope of those smaller procedures
		
		Example:
			(define (sqrt x)
			  (define  (good-enough? guess x)
			  // the rest of the code here
			  ))

			The code above has another (define) inside the main procedure being
				(define)d, demonstrating block structure
	
	Lexical scoping
		Certain shared variables in the bigger procedure are turned to free variable
			in the internal definitions instead of bound variables

		Instead of:
			(define (sqrt x)
			  (define  (good-enough? guess x)))

		The code can be:
			(define (sqrt x)
			  (define (good-enough? guess)))

		With x being shared by the sqrt and good-enough? procedures

# LINEAR RECURSION AND ITERATION
	Linear recursive process		: the amount of information to track and number of steps
							grow linearly with the input size
	Linear iterative process		: requires counter, does not require as much
							resources as linear recursion
						: the number of iterations grow linearly with input size

# TREE RECURSION
	Occurs when a process makes more than one recursive call
	Useful for operations on heirarchically structured data
